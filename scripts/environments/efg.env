#!/usr/local/bin/bash

# Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
# Copyright [2016] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#CONTACT
#
#  Please email comments or questions to the public Ensembl
#  developers list at <http://lists.ensembl.org/mailman/listinfo/dev>.
#
#  Questions may also be sent to the Ensembl help desk at
#  <http://www.ensembl.org/Help/Contact>.



echo "Setting up the Ensembl Function Genomics environment..." 

if [[ $SHELL != */bash ]]; then
    echo "Please initialise bash shell first."
    exit 1;
fi

#Add the auto completes back in as they are lost in subshells
. /etc/profile.d/bash_completion.sh


#Add the following to your .bashrc
#export SRC=~/src
#alias efg='bash --rcfile $SRC/ensembl-funcgen/scripts/environments/efg.env -i'




#Do findbin here

#Nope this only does the pwd from whereit is called
#bin=$( readlink -f -- "$( dirname -- "$0" )" )
#Nope, this return the pwd appended with /bash
#bin=$( readlink -f -- "${0%/*}" ) 
#Nope this is just pwd again!
#bin=$(cd -- "$(dirname "$0")" && pwd) 
#None of the above work when sourcing!!

#echo "bin is bin $bin " 

# To do

# 1 Make template file for efg.config to avoid overwriting custom conf on checkout

# 2 Rename all private methods to start with _ or lcfirst, for EFGHelp filtering
#   _ should never be called from command line, as they are dependant on caller context
#   lcfirst can be, but may not have -h option
#   All ucfirst should have -h option


#Need to export this so other scripts can use it
export funcs_file="$SRC/ensembl-funcgen/scripts/environments/funcs.sh"

if [ -z "$SRC" ]; then
	echo 'You have not defined $SRC in your .bashrc'
	echo 'Adding eFG setup to .bashrc'
	
	echo "Cannot yet findbin when sourcing in bash, add manually"
	exit 1
else
	#Now we need to check for ensembl-funcgen
	#Or can we findbin this?
	#echo 'Need to validate $SRC here'

	if [ ! -e $funcs_file ]; then
		echo "Could not find $funcs_file"
		echo 'Have you set $SRC correctly in your .bashrc?'
		return
	fi
fi


#Source in some handy functions
. $funcs_file


#Now set some constants dependant on funcs

if [[ ! $(isMac) ]]; then
	export HOSTNAME_SWITCH='-f'
fi


#Source in the efg.config
efg_conf_file=$SRC/ensembl-funcgen/scripts/environments/efg.config

if [ ! -e $efg_conf_file ]; then
	echo "Could not find $efg_conf_file"
	echo 'Have you set $SRC correctly in your .bashrc?'
	echo "Maybe you need to set up and edit your efg config: mv efg.config_example efg.config"
	return
fi


. $efg_conf_file


### ENV VARS ###

export ENV_NAME='EFG'

### ALIASES ###
#single quotes enable dynamic updating of commands

alias efg='cd $EFG_SRC'
alias efgd='cd $EFG_DATA'

#We want to add scratch and warehouse aliases here
#For user and group?

alias efgm='cd $EFG_SRC/modules/Bio/EnsEMBL/Funcgen'
alias efgmacs='xemacs $EFG_SRC/modules/Bio/EnsEMBL/Funcgen $EFG_SRC &'

#Change these aliases to funcs so they are exported to scripts run in the environment
#Have to use "$@" to preserve the quoting for -e'some command'!
mysqlw(){ mysql $MYSQL_ARGS -u${DB_USER} "$@";}
mysqlro(){ mysql $MYSQL_ARGS -u${DB_RO_USER} "$@";}
mysqlensdb(){ mysql -hensembldb.ensembl.org -uanonymous -P5306 "$@";} #Assumes you want post 47 DBs
mysqlcore(){ mysql $DNADB_MYSQL_ARGS "$@";}


_InitEnv(){
  #base colour is blue
  #hive branch (if within repo) in green
  export PS1='\[\033[34m\]${ENV_NAME}:\h\[\033[0;32m\]$(__git_ps1 " (%s)")\[\033[0m\]>'

  echo "Welcome to eFG!"


  #Handle STARTUP_CMD
  #This allows environments to be launched as a remote/interactive job/process
  #i.e. bsub efg to source a pipeline instance file and run a function  e.g. a 6GB DebugJob
  #Will have to do this in the caller, to make sure it's unset in the parent shell

  #If the STARTUP_CMD launches a subshell/remote shell how will this behave on exit?
  #it will exit to efg
  #If this if from an pipeline init file then it will exit to that file
  #so we would have to catch that and return 


  if [[ $STARTUP_CMD ]]; then
     echo -e "Executing STARTUP_CMD:\t$STARTUP_CMD"
     Execute "$STARTUP_CMD"
     export STARTUP_CMD=
  fi     
}

### FUNCTIONS ###

EFGHelp(){

	#Take optional opts here to change regex i.e. include all functions

	OPTIND=1

	usage="EFGHelp\n
Description:\tPrints a list of available aliases and functions\n
Usage:\t\tEFGHelp -h(elp)"

	while getopts ":h" opt; do
		case $opt in 
			h  ) echo -e $usage; return 0;;
            \? ) echo -e $usage; return 1;;
        esac 
    done

	echo ''
	echo 'Available aliases:'
	alias | sed 's/^alias //'
	echo ''
	echo 'Available functions:'
	set | grep -E "^[A-Z][a-zA-Z]+[[:space:]]*\(\)[[:space:]]*$" | sort | sed 's/()//'

	echo -e "\nFor more help try: 'FunctionName' -h"

#Can't match end of line here
	#Change all private methods to start with_ so we don't see them here
	#Prefix everything with env name? so we know where they are and can sort?
	#Or maybe just lcfirst everything we don't want to see?


	#'Analysis'Help should print a brief message, point to the docs and then call this method

}


CreateDB(){

	#This makes sure we reset the getopts ind if we have used it previously
	OPTIND=1

	drop=
	skip=
	species=
	pass=
	dbname=
	dnadb_host=
	usage='usage: CreateDB -d dbname -p password -s(pecies) e.g. e.g homo_sapiens [ -f(orce drop database) -t(skip type import) -H (dnadb host)]'


	#Can we take array_names here too?
	#Is this wise to restrict to arrays within a linked set?


	#Do we need to add dnadb params here?
	#And maybe override args for other db params
	#or should we provide a UseHost function?

	while getopts ":d:p:hfs:tH:" opt; do
		case $opt in 
		    d  ) dbname=$OPTARG ;; 
                    p  ) pass=$OPTARG ;;
		    f  ) drop=1 ;;
			t  ) skip=1 ;;
			s  ) species=$OPTARG ;;
			H  ) dnadb_host=$OPTARG;;
			h  ) echo $usage; return 0;;
			\? ) echo $usage; exit 1;;
	esac 
	done

	error=$(CheckVariables dbname pass)

 	if [ $? -ne 0 ]; then
		echo -e $error
		echo "$usage"
		return 1;
	fi


	#We should do some validation of the dbname here


    present=$(_QueryVal show databases like \"$dbname\")
     
    if [[ $present ]]
    then

        if [[ $drop ]]
        then
            echo ":: Dropping DB $dbname"
			#Need to Execute this
			mysqlw -p${pass} -e "DROP DATABASE IF EXISTS $dbname"
        else
            echo "DB $dbname already exists, please drop the database manually specify -f(orce) to drop the DB'"
            return
        fi
    fi

    echo ":: Creating DB $dbname"
    echo "CREATE database $dbname" | mysqlw -p${pass}
    mysqlw -p${pass} $dbname < $EFG_SQL/efg.sql


	#Now insert schema_version into meta to avoid warnings
	#Should really validate dbname first
	#Need separate method for this
	
	#schema_version=($(GetSchemaBuild $dbname))
	#This error does not get caught as it is brackets
	schema_version=$(GetSchemaBuild $dbname)
	
	if [ $? -ne 0 ]; then
		echo -e $schema_version
		return 1
	fi
	
	#space separated string as an array
	schema_version=($schema_version)
	schema_version=${schema_version[0]}

	echo ":: Setting meta schema_version to $schema_version"
	#mysqlw -p${pass} -e "INSERT into meta(meta_key, species_id, meta_value) values('schema_version', NULL, '$schema_version')" $dbname
	mysqlw -p${pass} -e "UPDATE meta set meta_value='$schema_version' where meta_key='schema_version'" $dbname


	#Now import the standard Cell/FeatureTypes
	if [ ! $skip ]; then

		error=$(CheckVariables species)

		if [ $? -ne 0 ]; then
			echo $error
			echo "You need to specify a species(-s) if you want to pre-load Cell/FeatureTypes(or skip with -t)"
		else
			echo ":: Pre-loading Cell/FeatureTypes"


			if [ $dnadb_host ]; then
				dnadb_host=" -dnadb_host $dnadb_host "
			fi

			#These only ever need to be pointed at staging or ensembldb
			#So no need for all dnadb params just host and port for forwarded ports
			#We are actually using DNADB_SCRIPT_ARGS instead which is non-obvious?
			#Need to allow override here?

			perl $EFG_SRC/scripts/import/import_type.pl -dnadb_host $DNADB_HOST -dnadb_port $DNADB_PORT -dnadb_user $DNADB_USER -host $DB_HOST -user $DB_USER -port $DB_PORT -dbname $dbname -species $species -pass $pass -type Analysis -file $EFG_SRC/scripts/import/types/Analyses.txt $dnadb_host
		
			perl $EFG_SRC/scripts/import/import_type.pl -dnadb_host $DNADB_HOST -dnadb_port $DNADB_PORT -dnadb_user $DNADB_USER -host $DB_HOST -user $DB_USER -port $DB_PORT -dbname $dbname -species $species -pass $pass -type FeatureType -file $EFG_SRC/scripts/import/types/FeatureTypes.txt $dnadb_host

			perl $EFG_SRC/scripts/import/import_feature_type_associations.pl -dnadb_host $DNADB_HOST -dnadb_port $DNADB_PORT -dnadb_user $DNADB_USER -host $DB_HOST -user $DB_USER -port $DB_PORT -dbname $dbname -species $species -pass $pass -file $EFG_SRC/scripts/import/types/FeatureType_associations.txt

			gene_links_file=$EFG_SRC/scripts/import/types/${species}.FeatureType_Genes.txt
		#Not present for all species
			
			if [ -e $gene_links_file ]; then
			    perl $EFG_SRC/scripts/import/import_feature_type_gene_links.pl -dnadb_host $DNADB_HOST -dnadb_port $DNADB_PORT -dnadb_user $DNADB_USER -host $DB_HOST -user $DB_USER -port $DB_PORT -dbname $dbname -species $species -pass $pass -file $gene_links_file
			else
			    echo "WARNING: Could not find Gene Links file: $gene_links_file"
			    echo "Either generate this file and re-run CreateDB or use import_feature_type_gene_links.pl"
			fi

			cell_types_file=$EFG_SRC/scripts/import/types/${species}.CellTypes.txt
		#Not present for all species

			if [ -e $cell_types_file ]; then

				perl $EFG_SRC/scripts/import/import_type.pl -dnadb_host $DNADB_HOST -dnadb_port $DNADB_PORT -dnadb_user $DNADB_USER -host $DB_HOST -user $DB_USER -port $DB_PORT -dbname $dbname -species $species -pass $pass -t CellType -file $EFG_SRC/scripts/import/types/${species}.CellTypes.txt $dnadb_host
			else
				echo "WARNING: Could not find CellType file: $cell_types_file"
				echo "Either generate this file and re-run CreateDB or use import_type.pl"
			fi

			echo "Setting meta species.ensembl_latin_name=$species"
			mysqlw -p${pass} -e "INSERT into meta(meta_key, species_id, meta_value) values('species.production_name', 1, '$species')" $dbname

			echo "Addind efg as default experimental group"
			mysqlw -p${pass} -e "INSERT INTO experimental_group (name,location,contact,description,url,is_project) VALUES ('efg','EMBL-EBI','http://lists.ensembl.org/mailman/listinfo/dev','default experimental group','http://www.ensembl.org',0)" $dbname;

		fi


	fi

	echo ":: Created $dbname"	
}




CreateLocalDB(){
	TMP=$MYSQL_ARGS
	MYSQL_ARGS=" -P${DB_PORT}";
	CreateDB $@
	export MYSQL_ARGS=$TMP


}


#This clashes with pipeline.env QueryVal
#and breaks CreateDB due to mysqlro and MYSQLARGS

_QueryVal(){

    #need to check if PASS defined else use READ_NAME
    val=$(echo $* | mysqlro)

	#should capture error here
	#this works differently if passing a var or passing a quoted string, var get's split
	#do not quote query!
	echo $val | sed "s/$2 //"
}






GetRegulatoryAttributeSets(){
	
	#echo ":: GetRegulatoryAttributeSets $*"
	#This makes sure we reset the getopts ind if we have used it previously
	OPTIND=1

	user=$DB_USER
	dbname=$DB_NAME
	host=$DB_HOST
	port=$DB_PORT
	pass=$PASS
	field=name
	name_clause=
	version=
	usage='usage: GetRegulatoryAttributeSets -u(ser $DB_USER) -h(ost $DB_HOST) -d(bname $DB_NAME) [ -p(assword $PASS) -P(ort $DB_PORT) -f(ield name) -s(set_name by default returns all) -v(ersion e.g 4 default is current) -h(elp) ]'


	while getopts ":u:d:H:p:P:v:f:s:h" opt; do
		case $opt in 
	        u  ) user=$OPTARG ;; 
            d  ) dbname=$OPTARG ;;
            H  ) host=$OPTARG ;;
			P  ) port=$OPTARG ;; 
			p  ) pass=$OPTARG ;;
			f  ) field=$OPTARG ;;
			s  ) name_clause=$OPTARG ;;
			v  ) version=$OPTARG ;;
			h  ) echo $usage; return 0;;
			\? ) echo $usage; exit 1;;#Do we want exit here?
        esac 
    done

		
	CheckVariables user dbname host

	#Set some more defaults
	port=${port:=3306}
	
	if [ $pass ]; then 
		pass="-p${PASS}"
	fi

	if [ $version ]; then
		version="_v${version}"
	fi

	#WHat is this?
	if [[ $field != '*' ]]; then
		field="$field as '' "
	fi
	
	if [ "$name_clause" ]; then 
		name_clause=" ds.name='${name_clause}' ";
	else
		name_clause=" ds.name like 'RegulatoryFeature%' ";
	fi

	#group_concat is truncated by default to 1024
	#This is also not working with multiple sets!

	sql="select ds.name, group_concat(fs.${field}) from data_set ds, supporting_set ss, feature_set fs where $name_clause and ds.data_set_id=ss.data_set_id and ss.supporting_set_id=.fs.feature_set_id order by fs.name";


	echo $sql
	#Can we QueryVal this?

	#we need to strip the header if field is not *
	
	

	mysql -e "$sql" -h$host -u$user $pass -P$port $dbname | sed '/^$/d'


}

export HISTCONTROL=ignoreboth
export HISTSIZE=1000000000
shopt -s histappend
PROMPT_COMMAND='history -a'
PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND ; }"'echo $$ $USER "$(history 1)" >> ~/.bash_eternal_history'
export BEH="${HOME}/.bash_eternal_history"
_InitEnv




#Should we add QC methods here or keep these in the sql/perl script?
#Maybe we can source these in as different function module?
#Or is this better kept in perl but separate from API methods?
